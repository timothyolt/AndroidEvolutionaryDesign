plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

static Map<String, ?> propertiesWithLocals(Project project) {
    def properties = new HashMap<String, ?>()
    properties.putAll(localProperties(project.rootProject))
    properties.putAll(localProperties(project))
    properties.putAll(project.properties)
    return properties
}

static Map<String, ?> localProperties(Project project) {
    def file = project.rootProject.file('local.properties')
    if (!file.exists()) return new HashMap<String, ?>()
    return file.withReader('UTF-8') { reader ->
        Properties localProperties = new Properties()
        localProperties.load(reader)
        return localProperties
    } as Map<String, ?>
}

android {
    // instrumented test bug https://github.com/android/android-test/issues/743
    compileSdkVersion 29

    defaultConfig {
        applicationId "com.timothyolt.evolutionarydesign"
        minSdkVersion 26
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        def localProperties = localProperties(project)

        println localProperties.entrySet().size()
        localProperties
                .entrySet()
                .findAll {
                    it.getKey().startsWith("evolutionarydesign.runtime.")
                }.forEach {
                    def localKey = it.getKey().replaceFirst("evolutionarydesign.runtime.", "")

                    def keyWords = localKey.split('\\.').toList()
                    def camelCaseWords = keyWords.take(1) + keyWords.drop(1).collect {
                        it[0].capitalize() + it.substring(1, it.length())
                    }
                    def camelCaseKey = camelCaseWords.join("")
                    manifestPlaceholders.put(camelCaseKey, it.getValue().toString())

                    def prefix = "OAUTH"
                    def upperCaseKey = localKey.replace('.', '_').toUpperCase()
                    buildConfigField "String", upperCaseKey, "\""+it.getValue().toString()+"\""
                }

        testInstrumentationRunner "com.timothyolt.evolutionarydesign.apparatus.MyTestRunner"
    }

    testOptions {
        execution = "ANDROIDX_TEST_ORCHESTRATOR"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1"

    implementation 'androidx.core:core-ktx:1.6.0'
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:2.3.1"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test:core-ktx:1.4.0'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestUtil 'androidx.test:orchestrator:1.4.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.4.0'
    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

}
